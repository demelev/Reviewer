// Generated by CoffeeScript 1.10.0

var column_name_map = {

    timestamp: {
        text: "Timespamp",
        has_comment: false
    },
    your_name : {
        text: "Please provide your full name.",
        has_comment: false
    },
    perform_tasks        : {
        text: "He/she performs the required tasks of the assigned role excellently.",
        has_comment: true },
    is_dilligent         : {
        text: "He/she is dilligent and detail oriented in performing the role assigned.",
        has_comment: true },
    is_works_well        : {
        text: "He/she is works well with others and hands off a clean product for the next person in the production chain.",
        has_comment: true },
    commits_to_deadlines : {
        text: "He/she commits to clear deadlines and upholds them consistently.",
        has_comment: true },
    right_intensity      : {
        text: "He/she demonstrates the right intensity and personal commitment in trying to produce the best work product possible in as little time as possible",
        has_comment: true },
    seeks_feedback       : {
        text: "He/she proactively seeks out feedback and acts on constructive feedback to grow and learn.",
        has_comment: true },
    lives_culture        : {
        text: "He/she lives the culture of Bully and contributes to making the company great.",
        has_comment: true },
    is_helping_others    : {
        text: "He/she is helping others grow and learn",
        has_comment: true },
    build_needed_systems : {
        text: "He/she is helping to build the needed systems, processes and structure for the company to be able to grow successfully",
        has_comment: true },
}

var bully_columns = {
    i_see_myself: {text: "I see myself working at Bully in five years from now.", has_comment: true},
    bully_is_a_great: {text: "Bully is a great place to work", has_comment: true},
    my_coworkers: {text: "My co-workers at the company are highly qualified and committed to the goal of producing world-class products.", has_comment: true},
    i_feel_challenged: {text: "I feel challeneged at my work and constantly learn new things.", has_comment: true},
    well_managed: {text: "Bully is a well managed company.", has_comment: true},
    understand_goals: {text: "I understand what the goals of the company are.", has_comment: true},
    over_next_two_years: {text: "Over the next 2-3 years what are the the things you want to learn/explore; what additional responsibilities would you like to assume?", has_comment: false},
    ideas_tips: {text: "What ideas, tips, feedback do you have for Bully?", has_comment: false},
}

var member_columns = {

    interaction_freq : { text: "How much have you interacted with the person being reviewed?", has_comment: false},
    is_anonym : { text: "Do you want the feedback for this person to be anonymous?", has_comment: false},
    perform_tasks        : {
        text: "He/she performs the required tasks of the assigned role excellently.",
        has_comment: true },
    is_dilligent         : {
        text: "He/she is dilligent and detail oriented in performing the role assigned.",
        has_comment: true },
    is_works_well        : {
        text: "He/she is works well with others and hands off a clean product for the next person in the production chain.",
        has_comment: true },
    commits_to_deadlines : {
        text: "He/she commits to clear deadlines and upholds them consistently.",
        has_comment: true },
    right_intensity      : {
        text: "He/she demonstrates the right intensity and personal commitment in trying to produce the best work product possible in as little time as possible",
        has_comment: true },
    seeks_feedback       : {
        text: "He/she proactively seeks out feedback and acts on constructive feedback to grow and learn.",
        has_comment: true },
    lives_culture        : {
        text: "He/she lives the culture of Bully and contributes to making the company great.",
        has_comment: true },
    is_helping_others    : {
        text: "He/she is helping others grow and learn",
        has_comment: true },
    build_needed_systems : {
        text: "He/she is helping to build the needed systems, processes and structure for the company to be able to grow successfully",
        has_comment: true },
};

/*
 *    // Splice method changes original array - create new copy of columns
 *    mem_cols = shallowCopy(column_name_map);
 *
 *    // Change first 2 files with member_first_fields
 *    mem_cols[timestamp] = 0;
 *    mem_cols[your_name] = 0;
 *    console.log(mem_cols);
 *
 *}).call();
 */

function shallowCopy( original )  {
    // First create an empty object with
    // same prototype of our original source
    var clone = Object.create( Object.getPrototypeOf( original ) ) ;

    var i , keys = Object.getOwnPropertyNames( original ) ;

    for ( i = 0 ; i < keys.length ; i ++ )
    {
        // copy each property into the clone
        Object.defineProperty( clone , keys[ i ] ,
            Object.getOwnPropertyDescriptor( original , keys[ i ] )
        ) ;
    }

    return clone ;
}

var slice_marker = "Want to save and continue later? - click below";
function get_separators_indicies(headers, separator) {
    var marker_positions = [];

    for(var idx = 0; idx < headers.length; idx++)
    {
        if (headers[idx] == separator)
        {
            marker_positions.push(idx);
        }
    }

    return marker_positions;
}

function split_array(array, split_indexes) {
    var slices = [];
    var begin = 0;

    for(var sep_idx in split_indexes)
    {
        slices.push( array.slice(begin, split_indexes[sep_idx]) );
        begin = split_indexes[sep_idx] + 1;
    }

    return slices;
}

function remove_redudant_columns(data, indicies) {

    console.log("Indicies length before: " + indicies.length);

    // remove indicies placed at odd positions in this array.
    indicies = indicies.filter(function(item, index) {
        return (index % 2 != 0);
    });

    console.log("Indicies length after: " + indicies.length);

    for(var i = 0; i < data.data.length; i++) {

        var d = data.data[i];

        data.data[i] = d.filter(function(item, index) {
            return indicies.indexOf(index) == -1;
        });
    }
}

function read_self_evaluation(data) {
    var obj = {};
    var idx = 0;

    // Read all the rest fields
    for(var prop in column_name_map) {

        var field = column_name_map[prop]; 

        if (field.has_comment) {
            obj[prop] = {
                score: data[idx++],
                comment: data[idx++]
            };
        }
        else
            obj[prop] = data[idx++];
    }

    return obj;
}
function read_evaluation(fields, data) {
    var obj = {};
    var idx = 0;

    // Read all the rest fields
    for(var prop in fields) {

        var field = fields[prop]; 

        if (field.has_comment) {
            obj[prop] = {
                score: data[idx++],
                comment: data[idx++]
            };
        }
        else
            obj[prop] = data[idx++];
    }
    return obj;
}

function parse_responses(data)
{
    //global variable
    response_split_indicies = get_separators_indicies(data.data[0], slice_marker);
    //Skip first 3 
    remove_redudant_columns(data, response_split_indicies.slice(1));

    // Get new split indicies.
    response_split_indicies = get_separators_indicies(data.data[0], slice_marker);

    var my_response = split_array(data.data[1], response_split_indicies);

    var self_eval = read_evaluation(column_name_map, my_response[0]);   
    var bully     = read_evaluation(bully_columns, my_response[1]);
    var next_user = read_evaluation(member_columns, my_response[2]);

    console.log(my_response[2]);
    console.log(next_user);

    return my_response;
}

function substitute_headers(text)
{
    for(var item in column_name_map)
    {
        text = text.replace(new RegExp(column_name_map[item].text, 'g'), item);
    }
    return text;
}

function read_responses(text)
{
    text = substitute_headers(text);
    var data = Papa.parse(text);
    return parse_responses(data);
}

function load_responses(callback)
{
    $.get("/data.csv", function(data, status) {
        console.log("file loaded");
        callback(read_responses(data));
    });
}

